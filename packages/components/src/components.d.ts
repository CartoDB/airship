/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface AsCategoryWidget {
      /**
       * Array of categories to display in the widget. Each category should include a `name` and a `value`. You can also override the bar color for each category with `color`.
       */
      'categories': object[];
      /**
       * Clear current selected categories
       */
      'clearSelection': () => void;
      /**
       * Default color to draw the bars. Default value is `#47DB99`.
       */
      'defaultBarColor': string;
      /**
       * Description text of the widget
       */
      'description': string;
      /**
       * Get current selected categories
       */
      'getSelectedCategories': () => string[];
      /**
       * Heading text of the widget
       */
      'heading': string;
      /**
       * If truthy, it'll show a button to clear selected categories when there are any. Default value is `false`.
       */
      'showClearButton': boolean;
      /**
       * If truthy, it'll render the heading and component's description. Default value is `true`.
       */
      'showHeader': boolean;
      /**
       * If truthy, we'll use the sum of all categories' value to render the bar percentage. By default, we use the maximum category value to render the bar percentage.
       */
      'useTotalPercentage': boolean;
      /**
       * The number of visible categories without aggregation.
       */
      'visibleCategories': number;
    }
  }

  interface HTMLAsCategoryWidgetElement extends StencilComponents.AsCategoryWidget, HTMLStencilElement {}

  var HTMLAsCategoryWidgetElement: {
    prototype: HTMLAsCategoryWidgetElement;
    new (): HTMLAsCategoryWidgetElement;
  };
  interface HTMLElementTagNameMap {
    'as-category-widget': HTMLAsCategoryWidgetElement;
  }
  interface ElementTagNameMap {
    'as-category-widget': HTMLAsCategoryWidgetElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'as-category-widget': JSXElements.AsCategoryWidgetAttributes;
    }
  }
  namespace JSXElements {
    export interface AsCategoryWidgetAttributes extends HTMLAttributes {
      /**
       * Array of categories to display in the widget. Each category should include a `name` and a `value`. You can also override the bar color for each category with `color`.
       */
      'categories'?: object[];
      /**
       * Default color to draw the bars. Default value is `#47DB99`.
       */
      'defaultBarColor'?: string;
      /**
       * Description text of the widget
       */
      'description'?: string;
      /**
       * Heading text of the widget
       */
      'heading'?: string;
      /**
       * Fired when selected categories changed or selected categories are cleared.
       */
      'onCategoriesSelected'?: (event: CustomEvent<string[]>) => void;
      /**
       * If truthy, it'll show a button to clear selected categories when there are any. Default value is `false`.
       */
      'showClearButton'?: boolean;
      /**
       * If truthy, it'll render the heading and component's description. Default value is `true`.
       */
      'showHeader'?: boolean;
      /**
       * If truthy, we'll use the sum of all categories' value to render the bar percentage. By default, we use the maximum category value to render the bar percentage.
       */
      'useTotalPercentage'?: boolean;
      /**
       * The number of visible categories without aggregation.
       */
      'visibleCategories'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AsSwitch {

    }
  }

  interface HTMLAsSwitchElement extends StencilComponents.AsSwitch, HTMLStencilElement {}

  var HTMLAsSwitchElement: {
    prototype: HTMLAsSwitchElement;
    new (): HTMLAsSwitchElement;
  };
  interface HTMLElementTagNameMap {
    'as-switch': HTMLAsSwitchElement;
  }
  interface ElementTagNameMap {
    'as-switch': HTMLAsSwitchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'as-switch': JSXElements.AsSwitchAttributes;
    }
  }
  namespace JSXElements {
    export interface AsSwitchAttributes extends HTMLAttributes {
      'onOnToggle'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AsToolbarItem {
      'src': string;
      'text': string;
    }
  }

  interface HTMLAsToolbarItemElement extends StencilComponents.AsToolbarItem, HTMLStencilElement {}

  var HTMLAsToolbarItemElement: {
    prototype: HTMLAsToolbarItemElement;
    new (): HTMLAsToolbarItemElement;
  };
  interface HTMLElementTagNameMap {
    'as-toolbar-item': HTMLAsToolbarItemElement;
  }
  interface ElementTagNameMap {
    'as-toolbar-item': HTMLAsToolbarItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'as-toolbar-item': JSXElements.AsToolbarItemAttributes;
    }
  }
  namespace JSXElements {
    export interface AsToolbarItemAttributes extends HTMLAttributes {
      'src'?: string;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AsToolbar {

    }
  }

  interface HTMLAsToolbarElement extends StencilComponents.AsToolbar, HTMLStencilElement {}

  var HTMLAsToolbarElement: {
    prototype: HTMLAsToolbarElement;
    new (): HTMLAsToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'as-toolbar': HTMLAsToolbarElement;
  }
  interface ElementTagNameMap {
    'as-toolbar': HTMLAsToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'as-toolbar': JSXElements.AsToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface AsToolbarAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;